#!/bin/sh                                                                                       

PID=
FORCE_INSTALL=

# Handle execution as pmPostInstall.script
if [ -z "$IPKG_OFFLINE_ROOT" ]; then
  IPKG_OFFLINE_ROOT=/media/cryptofs/apps
  mount -o remount,rw /
fi

mount -o remount,rw /boot

APPS=/media/cryptofs/apps

[ -d ${APPS} ] || { echo "Requires webOS 1.3.5 or later" ; exit 1 ; }

SRCDIR=${APPS}/usr/palm/applications/${PID}/additional_files

VERSION=`grep PRODUCT_VERSION_STRING /etc/palm-build-info | sed -e 's/.*=Palm webOS \([0-9.]*\).*/\1/'`

cd ${SRCDIR}

error=0

case "${VERSION}" in
    %COMPATIBLE_VERSIONS% )
    echo "Kernel confirmed to be compatible with this webOS version"
    ;;
    * )
    echo "Kernel is not compatible with this webOS version, aborting"
    exit 1
    ;;
esac

if [ "${FORCE_INSTALL}" = "1" ] ; then
  echo "Forcing unconditional overwrite of all kernel files"
fi

if [ "${FORCE_INSTALL}" != "1" ] ; then
  # Make sure all the target files are in virgin condition
  echo "Verifying no existing modifications to target files ..."
  for file in `find boot lib -type f -print` ; do
    md5sum="`grep -e \*./$file$ ${SRCDIR}/md5sums | awk '{print $1}'`"
    [ "`md5sum /$file | awk '{print $1}'`" = "$md5sum" ] || \
	{ echo "Verification failed on /$file"		; error=1 ; }
  done
fi

if [ "${error}" = "1" ] ; then
  echo "Device kernel is not in factory condition, refusing to install replacement"
  exit 1
fi

# Make a backup of all files that are about to be modified
echo "Creating backup of existing kernel files ..."
tar -C / -zcf ${APPS}/usr/palm/applications/${PID}/backup.tar.gz `find boot lib -type f -print` || error=1

if [ "${error}" = "1" ] ; then
  echo "Fatal error occurred, unable to create backup tarball"
  exit 1
fi

# Verify the backup of all files that are about to be modified
echo "Verifying backup of existing kernel files ..."
tar -C / -zdf ${APPS}/usr/palm/applications/${PID}/backup.tar.gz || error=1

if [ "${error}" = "1" ] ; then
  echo "Fatal error occurred, unable to verify backup tarball"
  exit 1
fi

# Make sure all the target directories exist and are writeable
echo "Verifying ability to write to target directories ..."
for dir in `find boot lib -type d -print` ; do
  mkdir -p /$dir			|| { echo "Error creating /$dir"			; error=1 ; }
  [ -d /$dir ]				|| { echo "Unable to create /$dir"			; error=1 ; }
  rm -f /$dir/.webosinternals.org ]	|| { echo "Error removing /$dir/.webosinternals.org"	; error=1 ; }
  [ ! -f /$dir/.webosinternals.org ]	|| { echo "Unable to remove /$dir/.webosinternals.org"	; error=1 ; }
  touch /$dir/.webosinternals.org ]	|| { echo "Error touching /$dir/.webosinternals.org"	; error=1 ; }
  [ -f /$dir/.webosinternals.org ]	|| { echo "Unable to touch /$dir/.webosinternals.org"	; error=1 ; }
  rm -f /$dir/.webosinternals.org ]	|| { echo "Error removing /$dir/.webosinternals.org"	; error=1 ; }
  [ ! -f /$dir/.webosinternals.org ]	|| { echo "Unable to remove /$dir/.webosinternals.org"	; error=1 ; }
done

# Make sure all the target files are readable and writeable
echo "Verifying ability to write to target files ..."
for file in `find boot lib -type f -print` ; do
  [ -r ${SRCDIR}/$file ]		|| { echo "Unable to read from ${SRCDIR}/$file"		; error=1 ; }
  [ -w /$file ]				|| { echo "Unable to write to /$file"			; error=1 ; }
done

if [ "${error}" = "1" ] ; then
  echo "Fatal error occurred, not installing files"
  exit 1
fi

# Copy all the files to the target locations
echo "Installing replacement kernel files ..."
for file in `find boot lib -type f -print` ; do
  rm -f /$file				|| { echo "Error removing /$file"			; error=1 ; }
  [ ! -f /$file ]			|| { echo "Unable to remove /$file"			; error=1 ; }
  cp ${SRCDIR}/$file /$file		|| { echo "Error installing /$file"			; error=1 ; }
  [ -f /$file ]				|| { echo "Unable to install /$file"			; error=1 ; }
  cmp ${SRCDIR}/$file /$file		|| { echo "Unable to verify /$file"			; error=1 ; }
  true
done

if [ "${error}" = "1" ] ; then
  echo "Fatal error occurred, restoring original files"
  tar -C / -zxf ${APPS}/usr/palm/applications/${PID}/backup.tar.gz || \
    { echo "Fatal error occurred, unable to extract tarball" ; exit 1 ; }
  tar -C / -zdf ${APPS}/usr/palm/applications/${PID}/backup.tar.gz || \
    { echo "Fatal error occurred, unable to verify tarball extraction" ; exit 1 ; }
  echo "Original files restored, we have normality, I repeat we have normality"
  exit 1
fi

echo "Replacement kernel successfully installed"

exit 0
